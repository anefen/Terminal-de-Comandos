-ctrl+l 

            |   Clear the console

-ctrl+r

            |   It opens a process that allows to search a previously used command

-start https://webpage.com

            |   The default web explorer opens the specified webpage

-explorer route
                
            |   The explorer open the directory specified in the route

-alias name="command"

            |    Creates an alias to execute a command
            |       +alias tree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"
            |        -------> It creates a readable tree of the directories, subdirectories and files who exist 
            |                 inside the actual directory

-history

            |    Shows a command record

-pwd

            |    Shows the actual route of the console

-ls 

            |    Shows a files and directories list of the actual route
            |
            |       +ls -l -------> Shows a files and directories list in a detailed mode
            |       +ls -a -------> Shows a files and directories list with hidden files
            |       +ls -A -------> Shows a files and directories list with hidden files except "." and ".."

-cd route

            |   The console moves to the specified route
            |
            |       +cd .. -------> Moves to the previous directory in the route

-pushd route / popd

            |   The command "pushd" works as a normal "cd" with the exception that it keeps in memory the route of the place
            |   it was executed, wich allow to move back just using the command "popd" 

-mkdir name

            |   Creates a directory with the specified name
            |   
            |       +mkdir oldDir1/oldDir2/newDir -------> Creates a directory ("newDir") in that route
            |       +mkdir -p dir1/dir2/newDir -------> Creates "newDir" inside "dir1/dir2". If those directories doesn't exist
            |                                           then it creates them

-rmdir name

            |   Erase a directory with the specified name. If it's not empty the command woldn't work
            |
            |       +rmdir -p dir1/dir2/dir3 -------> Erases "dir3", then "dir2" and finally "dir1", but only if they are empty
            |       +rm -fr dirToErase -------> Erase the directory "dirToErase" along with all of its contents

-touch name.extension

            |   Creates a empty file with the name and extension specified. If files already exist then it update last 
            |   modification date

-rm name.extension    

            |   Erase the specified file. 
            |   It can also be used to erase multiples files as rm name.extension name2.extension2 name3.extension4

-cp name.extension directory

            |   Copy the specified file into the specified directory
            |
            |       +cp -R dir1 dir2 -------> Copy "dir1" into "dir2". If "dir2" don't exist then it creates a copy of 
            |                                 "dir1" named as "dir2"

-mv first second

            |   If "second" is a directory, then moves "first" into "second"
            |   If "second" doesn't exist, then rename "first" as "second"
            |   If "first" and "second" are both files then rewrite "second" as "first"

-cat fileName

            |   This command make an output in the console of the content of the file specified
            |       +cat > fileName -------> It deploys a text editor inside the console that allows to instert what 
            |                                introduced inside the specified file (if it don't exist then it creates it).
            |                                To exit the text editor ctrl+c

-tail fileName

            |   It makes an output in console of the ten last lines in the specified file
            |       +tail -14 fileName -------> The command will output the specified number of lines of the file
            |       +tail -f fileName -------> As long as the file have been updated and saved the tail will include it

-less fileName

            |   It deploys an interface inside the console with an output of the specified file

-sudo -i
	        |	Enter in root mode

sudo apt-get update

            |   Updates software lists

sudo apt-get upgrade

            |   Updates the software in the software update list

-exit
	        |	Exit from root mode

-ctrl c

	        |	Stop the process

----------------------------------------------------------------------------------------------------------------------------------
Jokers

* = means 0 or more characters
? = means one character

Examples:
    - *.txt = means all files or directories who finish as ".txt"
    - S* = means all files or directories who begins as "S"
    - *k* = means all files or directories who contains a "k" in their names
    - S*a = means all files or directories who begins as "S" and finish as "a"
    - ??? = means all files or directories who have three characters
    - S?? = means all files or directories who begins as "S" and have two more characters
    - ???* = means all files or directories who have 3 or more characters 

----------------------------------------------------------------------------------------------------------------------------------

User, Owner Group

    -|rwx|rw-|r--|1|ssv|ssv|85  |jan 24 13:09|document.txt
    d|rwx|r-x|r-x|2|ssv|ssv|4096|jan 11 32:00|downloads
    |  |   |   |  |  |   |    |       |           |
    |  |   |   |  |  |   |    |       |           |---Name and extension of the file or directory
    |  |   |   |  |  |   |    |       |---Date of last modification
    |  |   |   |  |  |   |    |---Size in bytes
    |  |   |   |  |  |   |---Owner group
    |  |   |   |  |  |---Owner User
    |  |   |   |  |---In directories: the subdirectories that contain
    |  |   |   |---Permits of the rest
    |  |   |---Permits of the group
    |  |---Permits of the owner
    |---Type of file

Permission assignment

    -r = read permission
    -w = write permission
    -x = execution permission

    There are two ways to modify the permission over a file:
        
        UGO Method:

        Using the first letter of the receiver of the permission (user=u, group=g, rest=0), with
        an "+" or "-" depending if you want to give or remove the permission, and first letter of the kind
        of permission.

            Ex.- chmod u+w document.txt    Gives writing permission to the owner user of document.txt
                 chmod g-x program.exe     Removes execution permission to the owner grupop of program.exe

        Octal Method:

        Using an octal number composed of three characters who belongs to the next array:

            Octal         permissions
              0       |       ---
              1       |       --x
              2       |       -w-
              3       |       -wx
              4       |       r--
              5       |       r-x
              6       |       rw-
              7       |       rwx

            Ex.- chmod 700 document.txt    Gives all permissions over document.txt to the owner user and remove it from the rest
                 chmod 644 program.exe     Gives reading and writing permission to the owner user and just reading to the rest